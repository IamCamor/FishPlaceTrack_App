import '../models/achievement.dart';
import '../services/api_service.dart';

class AchievementService {
  static final List<Achievement> allAchievements = [
    // –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ã–±–∞–ª–æ–∫
    Achievement(
      id: '10_fishing',
      title: '–ù–æ–≤–∏—á–æ–∫',
      description: '10 —Ä—ã–±–∞–ª–æ–∫',
      icon: 'üé£',
      progressRequired: 10,
      type: AchievementType.totalCatches,
    ),
    Achievement(
      id: '50_fishing',
      title: '–û–ø—ã—Ç–Ω—ã–π —Ä—ã–±–æ–ª–æ–≤',
      description: '50 —Ä—ã–±–∞–ª–æ–∫',
      icon: 'üèÜ',
      progressRequired: 50,
      type: AchievementType.totalCatches,
    ),
    Achievement(
      id: '100_fishing',
      title: '–ú–∞—Å—Ç–µ—Ä —Ä—ã–±–∞–ª–∫–∏',
      description: '100 —Ä—ã–±–∞–ª–æ–∫',
      icon: 'üëë',
      progressRequired: 100,
      type: AchievementType.totalCatches,
    ),
    
    // –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –∫—Ä—É–ø–Ω—ã–π —É–ª–æ–≤
    Achievement(
      id: 'big_catch_5kg',
      title: '–ö—Ä—É–ø–Ω–∞—è –¥–æ–±—ã—á–∞',
      description: '–†—ã–±–∞ –±–æ–ª–µ–µ 5 –∫–≥',
      icon: 'üêü',
      progressRequired: 1,
      type: AchievementType.bigCatch,
    ),
    
    // –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –≤–∏–¥—ã —Ä—ã–±
    Achievement(
      id: 'pike_master',
      title: '–ú–∞—Å—Ç–µ—Ä —â—É–∫–∏',
      description: '10 —â—É–∫',
      icon: 'ü¶à',
      progressRequired: 10,
      type: AchievementType.speciesMaster,
    ),
  ];

  static Future<List<Achievement>> getUserAchievements(String userId) async {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ - –∑–∞–ø—Ä–æ—Å –∫ API
    return allAchievements.where((a) => a.id == '10_fishing' || a.id == 'big_catch_5kg').toList();
  }

  static Future<void> awardAchievement(String userId, String achievementId) async {
    await ApiService.awardAchievement(userId, achievementId);
  }

  static Future<void> checkForNewAchievements(String userId, int totalCatches) async {
    final unlocked = allAchievements.where(
      (a) => a.type == AchievementType.totalCatches && 
          totalCatches >= a.progressRequired
    );
    
    for (final achievement in unlocked) {
      await awardAchievement(userId, achievement.id);
    }
  }
}